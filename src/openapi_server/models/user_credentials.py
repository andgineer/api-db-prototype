# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from openapi_server import util
from openapi_server.models.base_model_ import Model


class UserCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, password=None):  # noqa: E501
        """UserCredentials - a model defined in OpenAPI

        :param email: The email of this UserCredentials.  # noqa: E501
        :type email: str
        :param password: The password of this UserCredentials.  # noqa: E501
        :type password: str
        """
        self.openapi_types = {"email": str, "password": str}

        self.attribute_map = {"email": "email", "password": "password"}

        self._email = email
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> "UserCredentials":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserCredentials of this UserCredentials.  # noqa: E501
        :rtype: UserCredentials
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserCredentials.


        :return: The email of this UserCredentials.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCredentials.


        :param email: The email of this UserCredentials.
        :type email: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserCredentials.


        :return: The password of this UserCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCredentials.


        :param password: The password of this UserCredentials.
        :type password: str
        """

        self._password = password
