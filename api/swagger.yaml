openapi: 3.0.0
info:
  version: "1.0-oas3"
  description: API-prototype
  title: API-prototype
paths:
  /auth:
    post:
      tags:
        - users
      operationId: GetToken
      summary: Get access token for the user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: No user with such email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid email/password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
  /users:
    get:
      tags:
        - users
      operationId: ListUsers
      summary: List all users
      parameters:
        - name: authorization
          in: header
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number of results to return. Starting from 1. Default 1.
          required: false
          schema:
            type: string
        - name: per_page
          in: query
          description: Number of items on page. Default 30.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
    post:
      tags:
        - users
      operationId: CreateUser
      summary: Create a user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUserResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
  '/users/{userId}':
    get:
      tags:
        - users
      summary: Info for a specific user
      operationId: GetUser
      parameters:
        - name: userId
          in: path
          description: The id of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
    put:
      tags:
        - users
      operationId: UpdateUser
      summary: Update details of particular user
      parameters:
        - name: userId
          in: path
          description: The id of the user to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
    delete:
      tags:
        - users
      operationId: DeleteUser
      summary: Delete the user
      parameters:
        - name: userId
          in: path
          description: The id of the user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
components:
  responses:
    '401':
      description: No user token
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: Operation is not permitted for the user
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: Internal server error
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    '501':
      description: Wrong request
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
      description: JWT from /auth request
  schemas:
    UserCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
          description: User jwt token
    Users:
      type: array
      items:
        $ref: '#/components/schemas/UserShort'
    UserShort:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/UserGroup'
        email:
          type: string
        name:
          type: string
    UpdateUser:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/UserGroup'
        email:
          type: string
        name:
          type: string
    NewUser:
      $ref: '#/components/schemas/UpdateUser'
    User:
      allOf:
        - $ref: '#/components/schemas/UpdateUser'
        - type: object
          properties:
            id:
              type: string
    UserGroup:
      type: string
      enum:
        - admin
        - full
        - guest
    NewUserResponse:
      type: object
      required:
        - id
      properties:
        id:
          description: ID of the created user
          type: string
    Empty:
      type: object
    Error:
      type: object
      properties:
        status:
          type: string
          description: error message